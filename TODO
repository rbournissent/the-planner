
Todo:
  ✔ Init Angular App @done(23-10-03 09:47)
  ng new planner --routing
  ✔ Add and configure Firebase (Hosting) @started(23-10-03 09:47) @done(23-10-03 09:58) @lasted(11m13s)
    firebase init
    ✔ Setup GH Actions @done(23-10-03 09:58)
    ✘ Customize domain @cancelled(23-10-03 09:59)
  ✔ Setup linter @started(23-10-03 09:58) @done(23-10-03 10:06) @lasted(8m51s)
    ng lint
  ✔ Add Tailwind @started(23-10-03 10:06) @done(23-10-03 10:10) @lasted(4m55s)
    npm i -D tailwindcss
    npx tailwindcss init

  ✔ Find a library that provides a calendar view with week (and day) view support @started(23-10-03 10:11) @done(23-10-03 10:32) @lasted(21m48s)
    Found FullCalendar with support for Angular: https://fullcalendar.io/docs/angular
    It provides week and day view, drag and drop support and some theme customization
    ✘ Or create a basic UI with 7 columns listing the shifts for each day (sorted by startTime) instead @cancelled(23-10-03 10:32)

  ☐ Add NgRx
    ng add @ngrx/store@latest --no-minimal
  ☐ Define main models (Shift, ShiftTemplate and Employee)
  ☐ Create a service to get employees
    ☐ Define action and reducer
  ☐ Create a service to get templates
    ☐ Define action and reducer
  ☐ Create a service to get and remove shifts
    ☐ Map employees and templates inside shifts (join by id)
    ☐ Define actions and reducer

  ☐ Render shifts in the week view
    ☐ Support remove shifts

  ☐ Create Modal to plan a scheduled item (aka shift)
    ☐ Use Overlay from Angular CDK

  ☐ Deploy app to Firebase

  ☐ Update README

  -- NICE TO HAVE --
  ☐ Improve UI/UX (if needed)
  ☐ Refactor code (if needed)
  ☐ Create a CRUD for Employees (new module)
    ☐ Define new actions and update reducer
    ☐ Update affected shifts from edit and delete operations
  ☐ Create a CRUD for Templates (new module)
    ☐ Define new actions and update reducer
    ☐ Validation: Check for conflicts before edit
    ☐ Update affected shifts from edit and delete operations
  ☐ Support drag and drop (check if possible first)
  ☐ Write some unit tests (critical methods and data)
    ☐ Require tests to pass before build and deploy

